There's two libraries: psycopg2 and psycopg2-binary
we're only just starting (and I'm assuming most students are fairly new to software development and programming), you should use psycopg2-binary only.
Don't install psycopg2 at all, and certainly don't install both packages. That's because when you install psycopg2-binary, it will just work.
To install psycopg2 there are a bunch of prerequisites that you probably won't have already installed.
In addition, you'll have to find some files and programs in your computer that can be quite difficult to find!

The difference between the two is that:
the binary package is a practical choice for development and testing but in production it is advised to use the package built from sources, whereas
building psycopg requires a few prerequisites (a C compiler, some external development library packages)
======

Here, the docker-compose and Dockerfile are used to run the same program.
docker-compose.yml
version: "3.9"

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cocktaildb
    volumes:
      - ./data:/var/lib/postgresql/data

  app:
    build: .
    restart: always
    #ports:
      #- "5000:5000"
    depends_on:
      - db


Dockerfile:
# Use an official Python runtime as a parent image
FROM python:3.9

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY .. /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Set environment variables
ENV POSTGRES_USER=postgres \
    POSTGRES_PASSWORD=postgres \
    POSTGRES_HOST=db \
    POSTGRES_PORT=5432 \
    POSTGRES_DB=cocktaildb

#start the program
CMD ["python", "cocktail.py"]

docker-compose up
and
docker-compose up --build  incase of rebuild

docker-compose down

Few things to explain:
At first, docker-compose has postgres credentails and Dockerfile has also it to connect with program.
Even the program has it. So, I need to make sure how to use these.

To test the containerid if the databse has the data
docker ps -a
docker exec -it containerid /bin/bash

psql -U postgres
\l

\c cocktaildb

\dt

I noticed that
the program loads the data to db but it keeps restarting the container as the connection was closing which i was used
in the program.

so I changed the restart: on-failure
and issue was resolved.
The restart setting in the docker-compose.yml file specifies the restart policy for the container.

The restart: always setting means that Docker will always restart the container if it exits,regardless of the exit code.
This is useful for ensuring that the container is always running, even if there is a failure or the host machine is
restarted. Other options for the restart setting include no (never restart), on-failure (restart only if the container
exits with a non-zero exit code), and unless-stopped (restart unless the container is explicitly stopped by the user).

Setting restart: on-failure will restart the container only when the container fails, which could be useful
in case of unexpected errors or crashes.
